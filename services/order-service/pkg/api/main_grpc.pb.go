// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc1
// source: services/order-service/pkg/api/main.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Order_GetOrderByID_FullMethodName    = "/order.order/GetOrderByID"
	Order_UpdateOrderByID_FullMethodName = "/order.order/UpdateOrderByID"
	Order_HealthCheck_FullMethodName     = "/order.order/HealthCheck"
)

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	GetOrderByID(ctx context.Context, in *GetOrderByIDIn, opts ...grpc.CallOption) (*GetOrderByIDOut, error)
	UpdateOrderByID(ctx context.Context, in *UpdateOrderByIDIn, opts ...grpc.CallOption) (*UpdateOrderByIDOut, error)
	HealthCheck(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Status, Status], error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) GetOrderByID(ctx context.Context, in *GetOrderByIDIn, opts ...grpc.CallOption) (*GetOrderByIDOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderByIDOut)
	err := c.cc.Invoke(ctx, Order_GetOrderByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UpdateOrderByID(ctx context.Context, in *UpdateOrderByIDIn, opts ...grpc.CallOption) (*UpdateOrderByIDOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderByIDOut)
	err := c.cc.Invoke(ctx, Order_UpdateOrderByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) HealthCheck(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Status, Status], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Order_ServiceDesc.Streams[0], Order_HealthCheck_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Status, Status]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Order_HealthCheckClient = grpc.BidiStreamingClient[Status, Status]

// OrderServer is the server API for Order service.
// All implementations should embed UnimplementedOrderServer
// for forward compatibility.
type OrderServer interface {
	GetOrderByID(context.Context, *GetOrderByIDIn) (*GetOrderByIDOut, error)
	UpdateOrderByID(context.Context, *UpdateOrderByIDIn) (*UpdateOrderByIDOut, error)
	HealthCheck(grpc.BidiStreamingServer[Status, Status]) error
}

// UnimplementedOrderServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServer struct{}

func (UnimplementedOrderServer) GetOrderByID(context.Context, *GetOrderByIDIn) (*GetOrderByIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}
func (UnimplementedOrderServer) UpdateOrderByID(context.Context, *UpdateOrderByIDIn) (*UpdateOrderByIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderByID not implemented")
}
func (UnimplementedOrderServer) HealthCheck(grpc.BidiStreamingServer[Status, Status]) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedOrderServer) testEmbeddedByValue() {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	// If the following call pancis, it indicates UnimplementedOrderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetOrderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrderByID(ctx, req.(*GetOrderByIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UpdateOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderByIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UpdateOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_UpdateOrderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateOrderByID(ctx, req.(*UpdateOrderByIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_HealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServer).HealthCheck(&grpc.GenericServerStream[Status, Status]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Order_HealthCheckServer = grpc.BidiStreamingServer[Status, Status]

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderByID",
			Handler:    _Order_GetOrderByID_Handler,
		},
		{
			MethodName: "UpdateOrderByID",
			Handler:    _Order_UpdateOrderByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthCheck",
			Handler:       _Order_HealthCheck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services/order-service/pkg/api/main.proto",
}
