// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc1
// source: services/order-service/pkg/inventry/main.proto

package inventry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Inventry_GetAvailableStocksByID_FullMethodName = "/inventry.inventry/GetAvailableStocksByID"
	Inventry_BuyStocksByID_FullMethodName          = "/inventry.inventry/BuyStocksByID"
	Inventry_HealthCheck_FullMethodName            = "/inventry.inventry/HealthCheck"
)

// InventryClient is the client API for Inventry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventryClient interface {
	GetAvailableStocksByID(ctx context.Context, in *GetAvailableStocksByIDIn, opts ...grpc.CallOption) (*GetAvailableStocksByIDOut, error)
	BuyStocksByID(ctx context.Context, in *BuyStocksByIDIn, opts ...grpc.CallOption) (*BuyStocksByIDOut, error)
	HealthCheck(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Status, Status], error)
}

type inventryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventryClient(cc grpc.ClientConnInterface) InventryClient {
	return &inventryClient{cc}
}

func (c *inventryClient) GetAvailableStocksByID(ctx context.Context, in *GetAvailableStocksByIDIn, opts ...grpc.CallOption) (*GetAvailableStocksByIDOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableStocksByIDOut)
	err := c.cc.Invoke(ctx, Inventry_GetAvailableStocksByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventryClient) BuyStocksByID(ctx context.Context, in *BuyStocksByIDIn, opts ...grpc.CallOption) (*BuyStocksByIDOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuyStocksByIDOut)
	err := c.cc.Invoke(ctx, Inventry_BuyStocksByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventryClient) HealthCheck(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Status, Status], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Inventry_ServiceDesc.Streams[0], Inventry_HealthCheck_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Status, Status]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Inventry_HealthCheckClient = grpc.BidiStreamingClient[Status, Status]

// InventryServer is the server API for Inventry service.
// All implementations must embed UnimplementedInventryServer
// for forward compatibility.
type InventryServer interface {
	GetAvailableStocksByID(context.Context, *GetAvailableStocksByIDIn) (*GetAvailableStocksByIDOut, error)
	BuyStocksByID(context.Context, *BuyStocksByIDIn) (*BuyStocksByIDOut, error)
	HealthCheck(grpc.BidiStreamingServer[Status, Status]) error
	mustEmbedUnimplementedInventryServer()
}

// UnimplementedInventryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventryServer struct{}

func (UnimplementedInventryServer) GetAvailableStocksByID(context.Context, *GetAvailableStocksByIDIn) (*GetAvailableStocksByIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableStocksByID not implemented")
}
func (UnimplementedInventryServer) BuyStocksByID(context.Context, *BuyStocksByIDIn) (*BuyStocksByIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyStocksByID not implemented")
}
func (UnimplementedInventryServer) HealthCheck(grpc.BidiStreamingServer[Status, Status]) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedInventryServer) mustEmbedUnimplementedInventryServer() {}
func (UnimplementedInventryServer) testEmbeddedByValue()                  {}

// UnsafeInventryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventryServer will
// result in compilation errors.
type UnsafeInventryServer interface {
	mustEmbedUnimplementedInventryServer()
}

func RegisterInventryServer(s grpc.ServiceRegistrar, srv InventryServer) {
	// If the following call pancis, it indicates UnimplementedInventryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Inventry_ServiceDesc, srv)
}

func _Inventry_GetAvailableStocksByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableStocksByIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventryServer).GetAvailableStocksByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventry_GetAvailableStocksByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventryServer).GetAvailableStocksByID(ctx, req.(*GetAvailableStocksByIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventry_BuyStocksByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyStocksByIDIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventryServer).BuyStocksByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventry_BuyStocksByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventryServer).BuyStocksByID(ctx, req.(*BuyStocksByIDIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventry_HealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InventryServer).HealthCheck(&grpc.GenericServerStream[Status, Status]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Inventry_HealthCheckServer = grpc.BidiStreamingServer[Status, Status]

// Inventry_ServiceDesc is the grpc.ServiceDesc for Inventry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inventry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventry.inventry",
	HandlerType: (*InventryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableStocksByID",
			Handler:    _Inventry_GetAvailableStocksByID_Handler,
		},
		{
			MethodName: "BuyStocksByID",
			Handler:    _Inventry_BuyStocksByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthCheck",
			Handler:       _Inventry_HealthCheck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services/order-service/pkg/inventry/main.proto",
}
